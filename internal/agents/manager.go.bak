package agents

import (
	"context"
	"fmt"
	"log"

	"github.com/christiaanpauw/swarmgo_dropbox_monitor/internal/db"
	"github.com/christiaanpauw/swarmgo_dropbox_monitor/internal/dropbox"
	"github.com/prathyushnallamothu/swarmgo"
)

// ManagerAgent coordinates the overall process of handling file changes
type ManagerAgent struct {
	agent    *swarmgo.Agent
	workflow *swarmgo.Workflow
	db       *db.DB
	dropbox  *dropbox.DropboxClient
}

// NewManagerAgent creates a new manager agent
func NewManagerAgent(apiKey string, dbClient *db.DB, dropboxClient *dropbox.DropboxClient) (*ManagerAgent, error) {
	agent := &swarmgo.Agent{
		Name: "FileChangeManager",
		Instructions: `You are a manager agent responsible for coordinating the processing of Dropbox file changes.
Your tasks include:
1. Receiving file changes from the monitoring system
2. Delegating database operations to the Database Agent
3. Coordinating content analysis with the Analysis Agent
4. Ensuring reports are generated by the Report Agent
Always maintain a clear log of operations and handle errors appropriately.`,
		Model: "gpt-4", // Using GPT-4 for better coordination capabilities
	}

	// Create workflow
	workflow := swarmgo.NewWorkflow(apiKey, swarmgo.OpenAI, swarmgo.HierarchicalWorkflow)
	
	// Add manager to supervisor team
	workflow.AddAgentToTeam(agent, swarmgo.SupervisorTeam)
	
	return &ManagerAgent{
		agent:    agent,
		workflow: workflow,
		db:       dbClient,
		dropbox:  dropboxClient,
	}, nil
}

// ProcessFileChanges handles new file changes from Dropbox
func (m *ManagerAgent) ProcessFileChanges(ctx context.Context, changes []string) error {
	log.Printf("Manager Agent: Processing %d file changes", len(changes))

	// Convert changes to a format suitable for agent processing
	messages := []swarmgo.ChatCompletionMessage{
		{
			Role: "user",
			Content: fmt.Sprintf("Process the following file changes:\n%v\n"+
				"1. Coordinate with Database Agent to store changes\n"+
				"2. Send files to Content Analysis Agent\n"+
				"3. Request Report Generator to create summary", changes),
		},
	}

	// Run the manager agent
	response, err := m.workflow.Run(ctx, m.agent, messages, nil, "", false, false, 5, true)
	if err != nil {
		return fmt.Errorf("manager agent error: %v", err)
	}

	log.Printf("Manager Agent Response: %s", response.Messages[len(response.Messages)-1].Content)
	return nil
}

// AddWorkerAgents adds the worker agents to the workflow
func (m *ManagerAgent) AddWorkerAgents(dbAgent, analysisAgent, reportAgent *swarmgo.Agent) error {
	// Add agents to their respective teams
	m.workflow.AddAgentToTeam(dbAgent, swarmgo.ResearchTeam)
	m.workflow.AddAgentToTeam(analysisAgent, swarmgo.AnalysisTeam)
	m.workflow.AddAgentToTeam(reportAgent, swarmgo.AnalysisTeam)

	// Connect manager to all worker agents
	m.workflow.ConnectAgents(m.agent.Name, dbAgent.Name)
	m.workflow.ConnectAgents(m.agent.Name, analysisAgent.Name)
	m.workflow.ConnectAgents(m.agent.Name, reportAgent.Name)

	// Connect analysis flow
	m.workflow.ConnectAgents(dbAgent.Name, analysisAgent.Name)
	m.workflow.ConnectAgents(analysisAgent.Name, reportAgent.Name)

	return nil
}
